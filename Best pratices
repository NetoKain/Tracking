// database/database_helper.dart
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  factory DatabaseHelper() => _instance;
  DatabaseHelper._internal();

  static Database? _database;

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    String path = join(await getDatabasesPath(), 'location_tracker.db');
    
    return await openDatabase(
      path,
      version: 1,
      onCreate: _onCreate,
      onUpgrade: _onUpgrade,
    );
  }

  Future<void> _onCreate(Database db, int version) async {
    await _createLocationTable(db);
    await _createGeofenceTable(db);
    await _createRouteTable(db);
    await _createUserPreferencesTable(db);
  }

  Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
    // Handle database upgrades here
    if (oldVersion < 2) {
      // Migration scripts for version 2
    }
  }

  Future<void> _createLocationTable(Database db) async {
    await db.execute('''
      CREATE TABLE locations(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        latitude REAL NOT NULL,
        longitude REAL NOT NULL,
        accuracy REAL NOT NULL,
        speed REAL,
        heading REAL,
        altitude REAL,
        timestamp INTEGER NOT NULL,
        sent_to_server INTEGER DEFAULT 0,
        created_at INTEGER DEFAULT (strftime('%s', 'now')),
        updated_at INTEGER DEFAULT (strftime('%s', 'now'))
      )
    ''');

    // Create indexes for better performance
    await db.execute('CREATE INDEX idx_locations_timestamp ON locations(timestamp)');
    await db.execute('CREATE INDEX idx_locations_sent ON locations(sent_to_server)');
  }

  Future<void> _createGeofenceTable(Database db) async {
    await db.execute('''
      CREATE TABLE geofences(
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        latitude REAL NOT NULL,
        longitude REAL NOT NULL,
        radius REAL NOT NULL,
        is_active INTEGER DEFAULT 1,
        created_at INTEGER DEFAULT (strftime('%s', 'now'))
      )
    ''');
  }

  Future<void> _createRouteTable(Database db) async {
    await db.execute('''
      CREATE TABLE routes(
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        start_time INTEGER NOT NULL,
        end_time INTEGER,
        total_distance REAL DEFAULT 0,
        total_duration INTEGER DEFAULT 0,
        average_speed REAL DEFAULT 0,
        status TEXT DEFAULT 'active',
        created_at INTEGER DEFAULT (strftime('%s', 'now'))
      )
    ''');
  }

  Future<void> _createUserPreferencesTable(Database db) async {
    await db.execute('''
      CREATE TABLE user_preferences(
        key TEXT PRIMARY KEY,
        value TEXT NOT NULL,
        updated_at INTEGER DEFAULT (strftime('%s', 'now'))
      )
    ''');
  }

  Future<void> closeDatabase() async {
    final db = await database;
    await db.close();
    _database = null;
  }

  Future<void> clearAllData() async {
    final db = await database;
    await db.delete('locations');
    await db.delete('geofences');
    await db.delete('routes');
    await db.delete('user_preferences');
  }
}

// models/location_model.dart
class LocationModel {
  final int? id;
  final double latitude;
  final double longitude;
  final double accuracy;
  final double? speed;
  final double? heading;
  final double? altitude;
  final DateTime timestamp;
  final bool sentToServer;
  final DateTime? createdAt;
  final DateTime? updatedAt;

  LocationModel({
    this.id,
    required this.latitude,
    required this.longitude,
    required this.accuracy,
    this.speed,
    this.heading,
    this.altitude,
    required this.timestamp,
    this.sentToServer = false,
    this.createdAt,
    this.updatedAt,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'latitude': latitude,
      'longitude': longitude,
      'accuracy': accuracy,
      'speed': speed,
      'heading': heading,
      'altitude': altitude,
      'timestamp': timestamp.millisecondsSinceEpoch,
      'sent_to_server': sentToServer ? 1 : 0,
      'created_at': createdAt?.millisecondsSinceEpoch,
      'updated_at': updatedAt?.millisecondsSinceEpoch,
    };
  }

  factory LocationModel.fromMap(Map<String, dynamic> map) {
    return LocationModel(
      id: map['id'],
      latitude: map['latitude'],
      longitude: map['longitude'],
      accuracy: map['accuracy'],
      speed: map['speed'],
      heading: map['heading'],
      altitude: map['altitude'],
      timestamp: DateTime.fromMillisecondsSinceEpoch(map['timestamp']),
      sentToServer: map['sent_to_server'] == 1,
      createdAt: map['created_at'] != null 
        ? DateTime.fromMillisecondsSinceEpoch(map['created_at'])
        : null,
      updatedAt: map['updated_at'] != null 
        ? DateTime.fromMillisecondsSinceEpoch(map['updated_at'])
        : null,
    );
  }

  LocationModel copyWith({
    int? id,
    double? latitude,
    double? longitude,
    double? accuracy,
    double? speed,
    double? heading,
    double? altitude,
    DateTime? timestamp,
    bool? sentToServer,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return LocationModel(
      id: id ?? this.id,
      latitude: latitude ?? this.latitude,
      longitude: longitude ?? this.longitude,
      accuracy: accuracy ?? this.accuracy,
      speed: speed ?? this.speed,
      heading: heading ?? this.heading,
      altitude: altitude ?? this.altitude,
      timestamp: timestamp ?? this.timestamp,
      sentToServer: sentToServer ?? this.sentToServer,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'latitude': latitude,
      'longitude': longitude,
      'accuracy': accuracy,
      'speed': speed,
      'heading': heading,
      'altitude': altitude,
      'timestamp': timestamp.toIso8601String(),
    };
  }
}

// models/geofence_model.dart
class GeofenceModel {
  final String id;
  final String name;
  final double latitude;
  final double longitude;
  final double radius;
  final bool isActive;
  final DateTime createdAt;

  GeofenceModel({
    required this.id,
    required this.name,
    required this.latitude,
    required this.longitude,
    required this.radius,
    this.isActive = true,
    required this.createdAt,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'latitude': latitude,
      'longitude': longitude,
      'radius': radius,
      'is_active': isActive ? 1 : 0,
      'created_at': createdAt.millisecondsSinceEpoch,
    };
  }

  factory GeofenceModel.fromMap(Map<String, dynamic> map) {
    return GeofenceModel(
      id: map['id'],
      name: map['name'],
      latitude: map['latitude'],
      longitude: map['longitude'],
      radius: map['radius'],
      isActive: map['is_active'] == 1,
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['created_at']),
    );
  }
}

// models/route_model.dart
class RouteModel {
  final String id;
  final String name;
  final DateTime startTime;
  final DateTime? endTime;
  final double totalDistance;
  final Duration totalDuration;
  final double averageSpeed;
  final String status; // 'active', 'completed', 'paused'
  final DateTime createdAt;

  RouteModel({
    required this.id,
    required this.name,
    required this.startTime,
    this.endTime,
    this.totalDistance = 0,
    this.totalDuration = Duration.zero,
    this.averageSpeed = 0,
    this.status = 'active',
    required this.createdAt,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'start_time': startTime.millisecondsSinceEpoch,
      'end_time': endTime?.millisecondsSinceEpoch,
      'total_distance': totalDistance,
      'total_duration': totalDuration.inSeconds,
      'average_speed': averageSpeed,
      'status': status,
      'created_at': createdAt.millisecondsSinceEpoch,
    };
  }

  factory RouteModel.fromMap(Map<String, dynamic> map) {
    return RouteModel(
      id: map['id'],
      name: map['name'],
      startTime: DateTime.fromMillisecondsSinceEpoch(map['start_time']),
      endTime: map['end_time'] != null 
        ? DateTime.fromMillisecondsSinceEpoch(map['end_time'])
        : null,
      totalDistance: map['total_distance'] ?? 0,
      totalDuration: Duration(seconds: map['total_duration'] ?? 0),
      averageSpeed: map['average_speed'] ?? 0,
      status: map['status'] ?? 'active',
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['created_at']),
    );
  }
}

// repositories/base_repository.dart
import '../database/database_helper.dart';
import 'package:sqflite/sqflite.dart';

abstract class BaseRepository {
  final DatabaseHelper _databaseHelper = DatabaseHelper();

  Future<Database> get database => _databaseHelper.database;

  // Common database operations
  Future<int> insert(String table, Map<String, dynamic> data) async {
    final db = await database;
    return await db.insert(table, data);
  }

  Future<List<Map<String, dynamic>>> query(
    String table, {
    List<String>? columns,
    String? where,
    List<dynamic>? whereArgs,
    String? orderBy,
    int? limit,
    int? offset,
  }) async {
    final db = await database;
    return await db.query(
      table,
      columns: columns,
      where: where,
      whereArgs: whereArgs,
      orderBy: orderBy,
      limit: limit,
      offset: offset,
    );
  }

  Future<int> update(
    String table,
    Map<String, dynamic> data, {
    String? where,
    List<dynamic>? whereArgs,
  }) async {
    final db = await database;
    return await db.update(
      table,
      data,
      where: where,
      whereArgs: whereArgs,
    );
  }

  Future<int> delete(
    String table, {
    String? where,
    List<dynamic>? whereArgs,
  }) async {
    final db = await database;
    return await db.delete(
      table,
      where: where,
      whereArgs: whereArgs,
    );
  }

  Future<List<Map<String, dynamic>>> rawQuery(String sql, [List<dynamic>? arguments]) async {
    final db = await database;
    return await db.rawQuery(sql, arguments);
  }

  Future<int> rawDelete(String sql, [List<dynamic>? arguments]) async {
    final db = await database;
    return await db.rawDelete(sql, arguments);
  }
}

// repositories/location_repository.dart
import '../models/location_model.dart';
import 'base_repository.dart';

class LocationRepository extends BaseRepository {
  static const String _tableName = 'locations';

  Future<int> insertLocation(LocationModel location) async {
    final data = location.toMap();
    data.remove('id'); // Remove ID for auto-increment
    data['created_at'] = DateTime.now().millisecondsSinceEpoch;
    data['updated_at'] = DateTime.now().millisecondsSinceEpoch;
    
    return await insert(_tableName, data);
  }

  Future<List<LocationModel>> getLocations({
    int? limit,
    int? offset,
    DateTime? startDate,
    DateTime? endDate,
    bool? sentToServer,
  }) async {
    String? where;
    List<dynamic>? whereArgs = [];

    if (startDate != null || endDate != null || sentToServer != null) {
      List<String> conditions = [];

      if (startDate != null) {
        conditions.add('timestamp >= ?');
        whereArgs.add(startDate.millisecondsSinceEpoch);
      }

      if (endDate != null) {
        conditions.add('timestamp <= ?');
        whereArgs.add(endDate.millisecondsSinceEpoch);
      }

      if (sentToServer != null) {
        conditions.add('sent_to_server = ?');
        whereArgs.add(sentToServer ? 1 : 0);
      }

      where = conditions.join(' AND ');
    }

    final List<Map<String, dynamic>> maps = await query(
      _tableName,
      where: where,
      whereArgs: whereArgs.isNotEmpty ? whereArgs : null,
      orderBy: 'timestamp DESC',
      limit: limit,
      offset: offset,
    );

    return maps.map((map) => LocationModel.fromMap(map)).toList();
  }

  Future<LocationModel?> getLocationById(int id) async {
    final List<Map<String, dynamic>> maps = await query(
      _tableName,
      where: 'id = ?',
      whereArgs: [id],
      limit: 1,
    );

    if (maps.isNotEmpty) {
      return LocationModel.fromMap(maps.first);
    }
    return null;
  }

  Future<List<LocationModel>> getUnsentLocations({int? limit}) async {
    return await getLocations(sentToServer: false, limit: limit);
  }

  Future<int> markLocationAsSent(int id) async {
    return await update(
      _tableName,
      {
        'sent_to_server': 1,
        'updated_at': DateTime.now().millisecondsSinceEpoch,
      },
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future<int> markMultipleLocationsAsSent(List<int> ids) async {
    if (ids.isEmpty) return 0;
    
    final placeholders = List.filled(ids.length, '?').join(',');
    return await rawDelete(
      'UPDATE $_tableName SET sent_to_server = 1, updated_at = ? WHERE id IN ($placeholders)',
      [DateTime.now().millisecondsSinceEpoch, ...ids],
    );
  }

  Future<int> getLocationCount({
    DateTime? startDate,
    DateTime? endDate,
    bool? sentToServer,
  }) async {
    String sql = 'SELECT COUNT(*) FROM $_tableName';
    List<dynamic> args = [];

    if (startDate != null || endDate != null || sentToServer != null) {
      List<String> conditions = [];

      if (startDate != null) {
        conditions.add('timestamp >= ?');
        args.add(startDate.millisecondsSinceEpoch);
      }

      if (endDate != null) {
        conditions.add('timestamp <= ?');
        args.add(endDate.millisecondsSinceEpoch);
      }

      if (sentToServer != null) {
        conditions.add('sent_to_server = ?');
        args.add(sentToServer ? 1 : 0);
      }

      sql += ' WHERE ${conditions.join(' AND ')}';
    }

    final result = await rawQuery(sql, args.isNotEmpty ? args : null);
    return result.first.values.first as int;
  }

  Future<int> deleteOldLocations({
    int keepLast = 1000,
    DateTime? olderThan,
  }) async {
    if (olderThan != null) {
      return await delete(
        _tableName,
        where: 'timestamp < ?',
        whereArgs: [olderThan.millisecondsSinceEpoch],
      );
    } else {
      return await rawDelete(
        'DELETE FROM $_tableName WHERE id NOT IN '
        '(SELECT id FROM $_tableName ORDER BY timestamp DESC LIMIT ?)',
        [keepLast],
      );
    }
  }

  Future<LocationModel?> getLatestLocation() async {
    final locations = await getLocations(limit: 1);
    return locations.isNotEmpty ? locations.first : null;
  }

  Future<List<LocationModel>> getLocationsByTimeRange(
    DateTime startTime,
    DateTime endTime, {
    int? limit,
  }) async {
    return await getLocations(
      startDate: startTime,
      endDate: endTime,
      limit: limit,
    );
  }

  Future<double> getTotalDistance({
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    final locations = await getLocations(
      startDate: startDate,
      endDate: endDate,
    );

    if (locations.length < 2) return 0;

    double totalDistance = 0;
    for (int i = 1; i < locations.length; i++) {
      // Calculate distance between consecutive points
      // Implementation would use Haversine formula
      totalDistance += _calculateDistance(locations[i - 1], locations[i]);
    }

    return totalDistance;
  }

  double _calculateDistance(LocationModel from, LocationModel to) {
    // Haversine formula implementation
    // This is a simplified version - use geolocator for actual implementation
    const double earthRadius = 6371000; // meters
    
    double lat1Rad = from.latitude * (3.14159 / 180);
    double lat2Rad = to.latitude * (3.14159 / 180);
    double deltaLatRad = (to.latitude - from.latitude) * (3.14159 / 180);
    double deltaLngRad = (to.longitude - from.longitude) * (3.14159 / 180);

    double a = (deltaLatRad / 2).abs() * (deltaLatRad / 2).abs() +
        lat1Rad.abs() * lat2Rad.abs() *
        (deltaLngRad / 2).abs() * (deltaLngRad / 2).abs();
    
    double c = 2 * (a.abs());
    
    return earthRadius * c;
  }
}

// repositories/geofence_repository.dart
import '../models/geofence_model.dart';
import 'base_repository.dart';

class GeofenceRepository extends BaseRepository {
  static const String _tableName = 'geofences';

  Future<int> insertGeofence(GeofenceModel geofence) async {
    return await insert(_tableName, geofence.toMap());
  }

  Future<List<GeofenceModel>> getAllGeofences({bool? activeOnly}) async {
    String? where;
    List<dynamic>? whereArgs;

    if (activeOnly == true) {
      where = 'is_active = ?';
      whereArgs = [1];
    }

    final List<Map<String, dynamic>> maps = await query(
      _tableName,
      where: where,
      whereArgs: whereArgs,
      orderBy: 'created_at DESC',
    );

    return maps.map((map) => GeofenceModel.fromMap(map)).toList();
  }

  Future<GeofenceModel?> getGeofenceById(String id) async {
    final List<Map<String, dynamic>> maps = await query(
      _tableName,
      where: 'id = ?',
      whereArgs: [id],
      limit: 1,
    );

    if (maps.isNotEmpty) {
      return GeofenceModel.fromMap(maps.first);
    }
    return null;
  }

  Future<int> updateGeofence(GeofenceModel geofence) async {
    return await update(
      _tableName,
      geofence.toMap(),
      where: 'id = ?',
      whereArgs: [geofence.id],
    );
  }

  Future<int> deleteGeofence(String id) async {
    return await delete(
      _tableName,
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future<int> toggleGeofenceStatus(String id, bool isActive) async {
    return await update(
      _tableName,
      {'is_active': isActive ? 1 : 0},
      where: 'id = ?',
      whereArgs: [id],
    );
  }
}

// repositories/route_repository.dart
import '../models/route_model.dart';
import 'base_repository.dart';

class RouteRepository extends BaseRepository {
  static const String _tableName = 'routes';

  Future<int> insertRoute(RouteModel route) async {
    return await insert(_tableName, route.toMap());
  }

  Future<List<RouteModel>> getAllRoutes({
    String? status,
    int? limit,
    int? offset,
  }) async {
    String? where;
    List<dynamic>? whereArgs;

    if (status != null) {
      where = 'status = ?';
      whereArgs = [status];
    }

    final List<Map<String, dynamic>> maps = await query(
      _tableName,
      where: where,
      whereArgs: whereArgs,
      orderBy: 'created_at DESC',
      limit: limit,
      offset: offset,
    );

    return maps.map((map) => RouteModel.fromMap(map)).toList();
  }

  Future<RouteModel?> getRouteById(String id) async {
    final List<Map<String, dynamic>> maps = await query(
      _tableName,
      where: 'id = ?',
      whereArgs: [id],
      limit: 1,
    );

    if (maps.isNotEmpty) {
      return RouteModel.fromMap(maps.first);
    }
    return null;
  }

  Future<RouteModel?> getActiveRoute() async {
    final routes = await getAllRoutes(status: 'active', limit: 1);
    return routes.isNotEmpty ? routes.first : null;
  }

  Future<int> updateRoute(RouteModel route) async {
    return await update(
      _tableName,
      route.toMap(),
      where: 'id = ?',
      whereArgs: [route.id],
    );
  }

  Future<int> completeRoute(String id, {
    required DateTime endTime,
    required double totalDistance,
    required Duration totalDuration,
    required double averageSpeed,
  }) async {
    return await update(
      _tableName,
      {
        'end_time': endTime.millisecondsSinceEpoch,
        'total_distance': totalDistance,
        'total_duration': totalDuration.inSeconds,
        'average_speed': averageSpeed,
        'status': 'completed',
      },
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future<int> deleteRoute(String id) async {
    return await delete(
      _tableName,
      where: 'id = ?',
      whereArgs: [id],
    );
  }
}

// repositories/user_preferences_repository.dart
import 'base_repository.dart';

class UserPreferencesRepository extends BaseRepository {
  static const String _tableName = 'user_preferences';

  Future<int> setPreference(String key, String value) async {
    final existing = await getPreference(key);
    
    if (existing != null) {
      return await update(
        _tableName,
        {
          'value': value,
          'updated_at': DateTime.now().millisecondsSinceEpoch,
        },
        where: 'key = ?',
        whereArgs: [key],
      );
    } else {
      return await insert(_tableName, {
        'key': key,
        'value': value,
        'updated_at': DateTime.now().millisecondsSinceEpoch,
      });
    }
  }

  Future<String?> getPreference(String key) async {
    final List<Map<String, dynamic>> maps = await query(
      _tableName,
      columns: ['value'],
      where: 'key = ?',
      whereArgs: [key],
      limit: 1,
    );

    if (maps.isNotEmpty) {
      return maps.first['value'] as String;
    }
    return null;
  }

  Future<Map<String, String>> getAllPreferences() async {
    final List<Map<String, dynamic>> maps = await query(_tableName);
    
    return Map.fromEntries(
      maps.map((map) => MapEntry(map['key'] as String, map['value'] as String)),
    );
  }

  Future<int> removePreference(String key) async {
    return await delete(
      _tableName,
      where: 'key = ?',
      whereArgs: [key],
    );
  }

  Future<int> clearAllPreferences() async {
    return await delete(_tableName);
  }

  // Helper methods for common preferences
  Future<void> setTrackingEnabled(bool enabled) async {
    await setPreference('tracking_enabled', enabled.toString());
  }

  Future<bool> isTrackingEnabled() async {
    final value = await getPreference('tracking_enabled');
    return value?.toLowerCase() == 'true';
  }

  Future<void> setLocationAccuracy(String accuracy) async {
    await setPreference('location_accuracy', accuracy);
  }

  Future<String> getLocationAccuracy() async {
    return await getPreference('location_accuracy') ?? 'high';
  }

  Future<void> setUpdateInterval(int seconds) async {
    await setPreference('update_interval', seconds.toString());
  }

  Future<int> getUpdateInterval() async {
    final value = await getPreference('update_interval');
    return int.tryParse(value ?? '60') ?? 60;
  }
}
